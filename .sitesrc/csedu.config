TITLE
Computer Science Education - Research - Vincent A. Cicirello - Professor of Computer Science

DESCRIPTION
My computer science education research includes studies of effective pedagogical techniques
in a variety of undergraduate computer science courses, including software engineering, artificial
intelligence, CS 1/2, discrete math, and non-major courses. 

CONTENT
<article itemprop="mainContentOfPage" itemscope itemtype="https://schema.org/WebPageElement">
<h2>Computer Science Education</h2>
<p>My computer science education research includes studies of effective pedagogical techniques
in a variety of undergraduate computer science courses, including software engineering, artificial
intelligence, CS 1/2, discrete math, and non-major courses.</p>

[[AD-1]]

<section>
<h3>Software Engineering</h3>

<p><strong>Student Developed Educational Tools:</strong> In computer science courses on software 
engineering, it is common practice for students to work in teams to develop a project. Such courses
typically cover the fundamental software processes spanning the software development lifecycle, from 
requirements specification through architectural design, implementation, testing, and evolution, along
with the software tools that support the development activities. The project component of such courses
enable students to develop both their technical skills as well as their ability to work effectively
in teams and to communicate well with others. There are many approaches that instructors of such courses
take for the structure of projects. In the paper, <a href="/publications/cicirello2017ccsce.html">Student 
Developed Computer Science Educational Tools as Software Engineering Course Projects</a>, I discuss my
approach that involves student teams developing an educational tool (e.g., a tutorial application,
educational game, etc) for learning about a computer science topic. The student teams choose the target
CS topic for their project. In addition to learning and experiencing software engineering processes and
tools, they also reinforce their earlier foundational knowledge as they develop a tool to assist
others in learning those foundational CS concepts. We found that students who developed CS learning 
tools in this course perceived a greater increase in learning progress on fundamental principles,
theories, and factual knowledge, as compared to their peers in course sections that utilized Real 
Projects for Real Clients, with an equivalent effect on teamwork and collaboration skills. Surprisingly,
the students who develop CS learning tools also report a significantly higher level of progress on 
industrial relevant skill development as compared to the students who developed so called Real projects
for Real Clients.</p>

<p><strong>Real Projects for Real Clients Courses:</strong> In the paper 
<a href="/publications/cicirello2013ccscne1.html">Experiences with a Real Projects for Real Clients Course on 
Software Engineering at a Liberal Arts Institution</a>, I present my experience and observations on the
use of the Real Projects for Real Clients Course (RPRCC) methodology in a senior-level course on Software
Engineering. In an RPRCC, students work on a project (usually as a team) whose deliverables serve the needs
of a real client. RPRCCs are examples of service learning. In our experience, recruiting potential real clients
is very easy within a university environment (e.g., a simple email to faculty and staff, explaining the concept,
and more than enough project ideas will emerge). Within a Software Engineering course, students gain valuable
experience in both the technical topics (software architecture, design patterns, etc) as well as soft skills
(teamwork, communications, etc). The paper provides details on the course content and structure, the process and
results of recruiting real clients, how teamwork and individual contributions to projects was assessed, and effects
on student outcomes.</p>
</section>

<section>
<h3>CS 1 / CS2 Courses</h3>

<p><strong>Pair Formation in Pair Programming:</strong> In the paper <a href="/publications/cicirello2009ccscne1.html">On 
Self-Selected Pairing in CS1: Who Pairs with Whom?</a>, I explored the dynamics of pair formation in
a CS1 course. The study spanned three years. Pair programming has been shown to be beneficial at all
levels of programming skill. Pair programming originated as part of extreme programming, but was then
quickly adopted by educators within classroom contexts. In pair programming, two programmers work
together on code, often from a single workstation. While one writes code, the other offers guidance
and reviews code syntax and logic, and plans out algorithmic strategies. The roles are reversed
periodically at regular intervals. In this study, the students had the option to either work
independently or to work as a pair for assignments. If they chose to work as a pair, they were
required to follow the pair programming protocol. Our aim was to learn about the students who
chose to pair program, how often they chose to pair program (e.g., they could choose to pair for
some assignments but not others), and who they chose to pair with (e.g., same majors, etc). The
detailed results are in the paper. A few of the findings include that math majors are more likely
to choose pair programming than either computer science or information systems majors, and math majors
more often choose to pair with other math majors. Additionally, when computer science and information
systems majors chose to pair, they more often paired with a non-major, possibly indicating a self-chosen
mentoring role.</p>

<p><strong>Effectiveness of Pop Quizzes:</strong> During a three year period, I examined
the impact of pop quizzes in a CS-1 course. The detailed results of the study can be found in a
paper titled <a href="/publications/cicirello2009sigcse.html">On the Role and Effectiveness 
of Pop Quizzes in CS1</a>, published in SIGCSE 2009. Performance on exams and programming
assignments were improved for the students in the course sections that experienced pop
quizzes, as compared to those in the course sections without pop quizzes. The benefit of
pop quizzes was greater for those majoring in either computer science or information systems
than it was for non-majors. Juniors and seniors also benefitted more from pop quizzes
than freshmen and sophomores. The quizzes themselves were low-stakes, with 50% of the
grade on a quiz coming strictly by taking it. The surprise nature of the quizzes act to
encourage students to continually review and prepare. Additionally, regular quizzes provide
continual feedback to students of their learning progress, while also informing the instructor
of topics that may need additional attention or review.</p>
</section>

<section class="publist">
<h3>Selected Publications</h3>
<ul itemscope itemtype="https://schema.org/ItemList">
<<JOSE2022>>
<<CCSCE2016>>
<<CCSCNE2013-unplugged>>
<<CCSCNE2013-SE>>
<<CCSCNE2009-bin>>
<<CCSCNE2009-pair>>
<<SIGCSE2009>>
<<CCSC2007>>
</ul>
</section>
</article>
